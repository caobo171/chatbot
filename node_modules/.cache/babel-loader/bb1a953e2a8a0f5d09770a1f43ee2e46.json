{"ast":null,"code":"import React, { createContext } from 'react';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar StateContext = createContext(null);\n\nvar Container =\n/*#__PURE__*/\nfunction () {\n  function Container(state) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    _defineProperty(this, \"state\", void 0);\n\n    _defineProperty(this, \"_listeners\", []);\n\n    this.state = state;\n  }\n\n  var _proto = Container.prototype;\n\n  _proto.setStateSync = function setStateSync(updater, callback) {\n    var nextState;\n\n    if (typeof updater === 'function') {\n      nextState = updater(this.state);\n    } else {\n      nextState = updater;\n    }\n\n    if (nextState == null) {\n      if (callback) callback();\n      return;\n    }\n\n    this.state = Object.assign({}, this.state, nextState);\n\n    this._listeners.forEach(function (fn) {\n      return fn(nextState);\n    });\n  };\n\n  _proto.setState = function setState(updater, callback) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      var nextState;\n\n      if (typeof updater === 'function') {\n        nextState = updater(_this.state);\n      } else {\n        nextState = updater;\n      }\n\n      if (nextState == null) {\n        if (callback) callback();\n        return;\n      }\n\n      _this.state = Object.assign({}, _this.state, nextState);\n\n      var promises = _this._listeners.map(function (listener) {\n        return listener(nextState);\n      });\n\n      return Promise.all(promises).then(function () {\n        if (callback) {\n          return callback();\n        }\n      });\n    });\n  };\n\n  _proto.subscribe = function subscribe(fn) {\n    this._listeners.push(fn);\n  };\n\n  _proto.unsubscribe = function unsubscribe(fn) {\n    this._listeners = this._listeners.filter(function (f) {\n      return f !== fn;\n    });\n  };\n\n  return Container;\n}();\n\nvar DUMMY_STATE = {};\n\nvar Subscribe =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Subscribe, _React$Component);\n\n  function Subscribe() {\n    var _this2;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"instances\", []);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"unmounted\", false);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"onUpdate\", function () {\n      return new Promise(function (resolve) {\n        if (!_this2.unmounted) {\n          _this2.setState(DUMMY_STATE, resolve);\n        } else {\n          resolve();\n        }\n      });\n    });\n\n    return _this2;\n  }\n\n  var _proto2 = Subscribe.prototype;\n\n  _proto2.componentWillUnmount = function componentWillUnmount() {\n    this.unmounted = true;\n\n    this._unsubscribe();\n  };\n\n  _proto2._unsubscribe = function _unsubscribe() {\n    var _this3 = this;\n\n    this.instances.forEach(function (container) {\n      container.unsubscribe(_this3.onUpdate);\n    });\n  };\n\n  _proto2._createInstances = function _createInstances(map, containers) {\n    var _this4 = this;\n\n    this._unsubscribe();\n\n    if (map === null) {\n      throw new Error('You must wrap your <Subscribe> components with a <Provider>');\n    }\n\n    var safeMap = map;\n    var instances = containers.map(function (ContainerItem) {\n      var instance;\n\n      if (typeof ContainerItem === 'object' && ContainerItem instanceof Container) {\n        instance = ContainerItem;\n      } else {\n        instance = safeMap.get(ContainerItem);\n\n        if (!instance) {\n          instance = new ContainerItem();\n          safeMap.set(ContainerItem, instance);\n        }\n      }\n\n      instance.unsubscribe(_this4.onUpdate);\n      instance.subscribe(_this4.onUpdate);\n      return instance;\n    });\n    this.instances = instances;\n    return instances;\n  };\n\n  _proto2.render = function render() {\n    var _this5 = this;\n\n    return React.createElement(StateContext.Consumer, null, function (map) {\n      return Reflect.apply(_this5.props.children, null, _this5._createInstances(map, _this5.props.to));\n    });\n  };\n\n  return Subscribe;\n}(React.Component);\n\nvar SubscribeOne =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inheritsLoose(SubscribeOne, _React$Component2);\n\n  function SubscribeOne() {\n    var _this6;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this6 = _React$Component2.call.apply(_React$Component2, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), \"instance\", null);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), \"unmounted\", false);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), \"onUpdate\", function (changedState) {\n      return new Promise(function (resolve) {\n        if (!_this6.unmounted && Array.isArray(_this6.props.bind) && Object.keys(changedState).filter(function (key) {\n          return _this6.props.bind.includes(key);\n        }).length > 0) {\n          _this6.setState(DUMMY_STATE, resolve);\n        } else {\n          resolve();\n        }\n      });\n    });\n\n    return _this6;\n  }\n\n  var _proto3 = SubscribeOne.prototype;\n\n  _proto3.componentWillUnmount = function componentWillUnmount() {\n    this.unmounted = true;\n\n    this._unsubscribe();\n  };\n\n  _proto3._unsubscribe = function _unsubscribe() {\n    this.instance && this.instance.unsubscribe(this.onUpdate);\n  };\n\n  _proto3._createInstance = function _createInstance(map, container) {\n    this._unsubscribe();\n\n    if (map === null) {\n      throw new Error('You must wrap your <Subscribe> components with a <Provider>');\n    }\n\n    var safeMap = map;\n\n    if (typeof container === 'object' && container instanceof Container) {\n      this.instance = container;\n    } else {\n      this.instance = safeMap.get(container);\n\n      if (!this.instance) {\n        this.instance = new container();\n        safeMap.set(container, this.instance);\n      }\n    }\n\n    this.instance.unsubscribe(this.onUpdate);\n    this.instance.subscribe(this.onUpdate);\n    return this.instance;\n  };\n\n  _proto3.render = function render() {\n    var _this7 = this;\n\n    return React.createElement(StateContext.Consumer, null, function (map) {\n      return _this7.props.children(_this7._createInstance(map, _this7.props.to));\n    });\n  };\n\n  return SubscribeOne;\n}(React.Component);\n\nfunction Provider(props) {\n  var childMap = new Map();\n\n  if (props.inject) {\n    props.inject.forEach(function (instance) {\n      childMap.set(instance.constructor, instance);\n    });\n  }\n\n  return React.createElement(StateContext.Provider, {\n    value: childMap\n  }, props.children);\n}\n\nexport { StateContext, Container, Subscribe, SubscribeOne, Provider };","map":null,"metadata":{},"sourceType":"module"}