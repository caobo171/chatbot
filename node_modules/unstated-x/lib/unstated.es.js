import React, { createContext } from 'react';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var StateContext = createContext(null);
var Container =
/*#__PURE__*/
function () {
  function Container(state) {
    if (state === void 0) {
      state = {};
    }

    _defineProperty(this, "state", void 0);

    _defineProperty(this, "_listeners", []);

    this.state = state;
  }

  var _proto = Container.prototype;

  _proto.setStateSync = function setStateSync(updater, callback) {
    var nextState;

    if (typeof updater === 'function') {
      nextState = updater(this.state);
    } else {
      nextState = updater;
    }

    if (nextState == null) {
      if (callback) callback();
      return;
    }

    this.state = Object.assign({}, this.state, nextState);

    this._listeners.forEach(function (fn) {
      return fn(nextState);
    });
  };

  _proto.setState = function setState(updater, callback) {
    var _this = this;

    return Promise.resolve().then(function () {
      var nextState;

      if (typeof updater === 'function') {
        nextState = updater(_this.state);
      } else {
        nextState = updater;
      }

      if (nextState == null) {
        if (callback) callback();
        return;
      }

      _this.state = Object.assign({}, _this.state, nextState);

      var promises = _this._listeners.map(function (listener) {
        return listener(nextState);
      });

      return Promise.all(promises).then(function () {
        if (callback) {
          return callback();
        }
      });
    });
  };

  _proto.subscribe = function subscribe(fn) {
    this._listeners.push(fn);
  };

  _proto.unsubscribe = function unsubscribe(fn) {
    this._listeners = this._listeners.filter(function (f) {
      return f !== fn;
    });
  };

  return Container;
}();
var DUMMY_STATE = {};
var Subscribe =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Subscribe, _React$Component);

  function Subscribe() {
    var _this2;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this2 = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "state", {});

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "instances", []);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "unmounted", false);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "onUpdate", function () {
      return new Promise(function (resolve) {
        if (!_this2.unmounted) {
          _this2.setState(DUMMY_STATE, resolve);
        } else {
          resolve();
        }
      });
    });

    return _this2;
  }

  var _proto2 = Subscribe.prototype;

  _proto2.componentWillUnmount = function componentWillUnmount() {
    this.unmounted = true;

    this._unsubscribe();
  };

  _proto2._unsubscribe = function _unsubscribe() {
    var _this3 = this;

    this.instances.forEach(function (container) {
      container.unsubscribe(_this3.onUpdate);
    });
  };

  _proto2._createInstances = function _createInstances(map, containers) {
    var _this4 = this;

    this._unsubscribe();

    if (map === null) {
      throw new Error('You must wrap your <Subscribe> components with a <Provider>');
    }

    var safeMap = map;
    var instances = containers.map(function (ContainerItem) {
      var instance;

      if (typeof ContainerItem === 'object' && ContainerItem instanceof Container) {
        instance = ContainerItem;
      } else {
        instance = safeMap.get(ContainerItem);

        if (!instance) {
          instance = new ContainerItem();
          safeMap.set(ContainerItem, instance);
        }
      }

      instance.unsubscribe(_this4.onUpdate);
      instance.subscribe(_this4.onUpdate);
      return instance;
    });
    this.instances = instances;
    return instances;
  };

  _proto2.render = function render() {
    var _this5 = this;

    return React.createElement(StateContext.Consumer, null, function (map) {
      return Reflect.apply(_this5.props.children, null, _this5._createInstances(map, _this5.props.to));
    });
  };

  return Subscribe;
}(React.Component);
var SubscribeOne =
/*#__PURE__*/
function (_React$Component2) {
  _inheritsLoose(SubscribeOne, _React$Component2);

  function SubscribeOne() {
    var _this6;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this6 = _React$Component2.call.apply(_React$Component2, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), "state", {});

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), "instance", null);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), "unmounted", false);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), "onUpdate", function (changedState) {
      return new Promise(function (resolve) {
        if (!_this6.unmounted && Array.isArray(_this6.props.bind) && Object.keys(changedState).filter(function (key) {
          return _this6.props.bind.includes(key);
        }).length > 0) {
          _this6.setState(DUMMY_STATE, resolve);
        } else {
          resolve();
        }
      });
    });

    return _this6;
  }

  var _proto3 = SubscribeOne.prototype;

  _proto3.componentWillUnmount = function componentWillUnmount() {
    this.unmounted = true;

    this._unsubscribe();
  };

  _proto3._unsubscribe = function _unsubscribe() {
    this.instance && this.instance.unsubscribe(this.onUpdate);
  };

  _proto3._createInstance = function _createInstance(map, container) {
    this._unsubscribe();

    if (map === null) {
      throw new Error('You must wrap your <Subscribe> components with a <Provider>');
    }

    var safeMap = map;

    if (typeof container === 'object' && container instanceof Container) {
      this.instance = container;
    } else {
      this.instance = safeMap.get(container);

      if (!this.instance) {
        this.instance = new container();
        safeMap.set(container, this.instance);
      }
    }

    this.instance.unsubscribe(this.onUpdate);
    this.instance.subscribe(this.onUpdate);
    return this.instance;
  };

  _proto3.render = function render() {
    var _this7 = this;

    return React.createElement(StateContext.Consumer, null, function (map) {
      return _this7.props.children(_this7._createInstance(map, _this7.props.to));
    });
  };

  return SubscribeOne;
}(React.Component);
function Provider(props) {
  var childMap = new Map();

  if (props.inject) {
    props.inject.forEach(function (instance) {
      childMap.set(instance.constructor, instance);
    });
  }

  return React.createElement(StateContext.Provider, {
    value: childMap
  }, props.children);
}

export { StateContext, Container, Subscribe, SubscribeOne, Provider };
